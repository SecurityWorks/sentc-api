base_mw: "middleware"
prefix: "/api"
routes:
  # api v1 routes
  - group:
      p: "/v1"
      gr:
        #_______________________________________________________________________________________________________________
        # customer
        - group:
            p: "/customer"
            mw:
              - app_token::app_token_base_app_transform
            gr:
              - post: {p: "/register", s: crate::customer::register}
              - post: {p: "/prepare_login", s: crate::customer::prepare_login}
              - post: {p: "/done_login", s: crate::customer::done_login}
              - get: {p: "/captcha", s: crate::customer::customer_captcha}
              - put: {p: "/password_reset", s: crate::customer::prepare_reset_password}
              - put: {p: "/password_reset_validation", s: crate::customer::done_reset_password}
              - put:
                  p: "/refresh"
                  s: crate::customer::refresh_jwt
                  mw:
                    - jwt::jwt_expire_transform
              - group:
                  p: ""
                  mw:
                    - jwt::jwt_transform
                  gr:
                    # customer must be logged in, in the dashboard when sending this req
                    - post: { p: "/register_validation", s: crate::customer::done_register }
                    - patch: { p: "/email_resend", s: crate::customer::resend_email }
                    - put: { p: "", s: crate::customer::update }
                    - put: { p: "/data", s: crate::customer::update_data }
                    - put: { p: "/password", s: crate::customer::change_password }
                    - delete: { p: "", s: crate::customer::delete }
        #_______________________________________________________________________________________________________________
        # customer routes with the jwt check,
        # and we are only using public token for dashboard routes
        # App routes
        - group:
            p: "/customer"
            mw:
              - jwt::jwt_transform
            gr:
              - get: { p: "/apps/:last_fetched_time/:last_app_id", s: crate::customer_app::get_all_apps }
              - post: { p: "/app", s: crate::customer_app::create_app }
              - group:
                  p: "/app/:app_id"
                  gr:
                    - get: {p: "", s: crate::customer_app::get_app_details}
                    - put: { p: "", s: crate::customer_app::update }
                    - put: {p: "/options", s: crate::customer_app::update_options}
                    - put: {p: "/file_options", s: crate::customer_app::update_file_options}
                    - delete: { p: "", s: crate::customer_app::delete }
                    - patch: { p: "/token_renew", s: crate::customer_app::renew_tokens }
                    # jwt keys
                    - patch: { p: "/new_jwt_keys", s: crate::customer_app::add_jwt_keys }
                    - get: { p: "/jwt", s: crate::customer_app::get_jwt_details }
                    - delete: { p: "/jwt/:jwt_id", s: crate::customer_app::delete_jwt_keys }
        #_______________________________________________________________________________________________________________
        # routes don't need jwt check, but an app token
        - group:
            p: ""
            mw:
              - app_token::app_token_transform
            gr:
              - get: { p: "/user/:user_id/public_key", s: crate::user::get_public_key_data }
              - get: { p: "/user/:user_id/public_key/:key_id", s: crate::user::get_public_key_by_id }
              - get: { p: "/user/:user_id/verify_key/:key_id", s: crate::user::get_verify_key_by_id }
              - post: {p: "/exists", s: crate::user::exists}
              - post: {p: "/register", s: crate::user::register}
              - post: {p: "/prepare_login", s: crate::user::prepare_login}
              - post: {p: "/done_login", s: crate::user::done_login}
              - post: {p: "/user/prepare_register_device", s: crate::user::prepare_register_device}
              #_________________________________________________________________________________________________________
              # group with exp jwt mw -> the jwt can be exp for this routes
              - group:
                  p: ""
                  mw:
                    - jwt::jwt_expire_transform
                  gr:
                    - put: {p: "/refresh", s: crate::user::refresh_jwt}
                    - post: {p: "/init", s: crate::user::init_user}
              #_________________________________________________________________________________________________________
              - group:
                  p: "/keys"
                  gr:
                    - group:
                        p: "/sym_key"
                        gr:
                          - post:
                              p: ""
                              s: crate::key_management::register_sym_key
                              mw:
                                - jwt::jwt_transform
                          - delete:
                              p: "/:key_id"
                              s: crate::key_management::delete_sym_key
                              mw:
                                - jwt::jwt_transform

                          - get: { p: "/master_key/:master_key_id/:last_fetched_time/:last_key_id", s: crate::key_management::get_all_sym_keys_to_master_key }
                          - get: { p: "/:key_id", s: crate::key_management::get_sym_key_by_id }
        #_______________________________________________________________________________________________________________
        # routes which needed jwt check with a valid jwt
        - group:
            p: ""
            mw:
              - jwt::jwt_transform
              - app_token::app_token_transform
            gr:
              #_________________________________________________________________________________________________________
              # user routes in the user mod
              - group:
                  p: "/user"
                  gr:
                    - get: {p: "/device/:last_fetched_time/:last_id", s: crate::user::get_devices}
                    - put: {p: "", s: crate::user::update}
                    - put: {p: "/done_register_device", s: crate::user::done_register_device}
                    - put: {p: "/update_pw", s: crate::user::change_password}
                    - put: {p: "/reset_pw", s: crate::user::reset_password}
                    # check the api token for delete action, maybe the app creator only wants to trigger delete from the own backend
                    - delete: {p: "", s: crate::user::delete}
                    - delete: {p: "/device/:device_id", s: crate::user::delete_device}
                    #___________________________________________________________________________________________________
                    - group:
                        p: "/user_keys"
                        gr:
                          - post: {p: "/rotation", s: crate::user::user_group_key_rotation}
                          - get: {p: "/rotation", s: crate::user::get_user_group_keys_for_update}
                          - put: {p: "/rotation/:key_id", s: crate::user::done_key_rotation_for_device}
                          - get: {p: "/key/:key_id", s: crate::user::get_user_key}
                          - get: {p: "/keys/:last_fetched_time/:last_k_id", s: crate::user::get_user_keys}
                          - put: {p: "/session/:key_session_id", s: crate::user::device_key_upload}
              #_________________________________________________________________________________________________________
              # group routes in the group mod, check always the app token for this actions
              - group:
                  p: "/group"
                  gr:
                    #___________________________________________________________________________________________________
                    # no group mw check needed here
                    - post: {p: "", s: crate::group::create}
                    - get: {p: "/all/:last_fetched_time/:last_group_id", s: crate::group::get_all_groups_for_user}
                    # no group mw for get invite req, because this is called form the user, not the group
                    - get: {p: "/invite/:last_fetched_time/:last_group_id", s: crate::group::get_invite_req}
                    # get all send join req, this is called from the user
                    - get: {p: "/joins/:last_fetched_time/:last_group_id", s: crate::group::get_sent_join_req_for_user}
                    - group:
                        p: "/:group_id"
                        gr:
                          - patch: { p: "/invite", s: crate::group::accept_invite }
                          - delete: { p: "/invite", s: crate::group::reject_invite }
                          - patch: {p: "/join_req", s: crate::group::join_req}
                          - get: { p: "/public_key", s: crate::group::get_public_key_data }
                    #___________________________________________________________________________________________________
                    # group mw check needed here
                    - group:
                        p: "/:group_id"
                        mw:
                          - group::group_transform
                        gr:
                          - get: { p: "", s: crate::group::get_user_group_data }
                          - get: {p: "/update_check", s: crate::group::get_key_update_for_user}
                          - get: { p: "/keys/:last_fetched_time/:last_k_id", s: crate::group::get_user_group_keys }
                          - get: { p: "/key/:key_id", s: crate::group::get_user_group_key }
                          - get: {p: "/member/:last_fetched_time/:last_user_id", s: crate::group::get_group_member}
                          - post: {p: "/child", s: crate::group::create_child_group}
                          - post: {p: "/connected", s: crate::group::create_connected_group_from_group}
                          - delete: {p: "", s: crate::group::delete}
                          - delete: {p: "/leave", s: crate::group::leave_group}
                          - delete: {p: "/kick/:user_id", s: crate::group::kick_user_from_group}

                          # gets the invites for group as user
                          - get: {p: "/invite/:last_fetched_time/:last_group_id", s: crate::group::get_invite_req_for_group}
                          # get sent join req for group as user
                          - get: {p: "/joins/:last_fetched_time/:last_group_id", s: crate::group::get_sent_join_req_for_group}
                          - delete: { p: "/invite/:group_id_to_reject", s: crate::group::reject_invite_group }
                          - patch: { p: "/invite/:group_id_to_join", s: crate::group::accept_invite_group }
                          # the normal invite to the actual group endpoints
                          - put: {p: "/invite/:invited_user", s: crate::group::invite_request}
                          - put: {p: "/invite_group/:invited_group", s: crate::group::invite_request_to_group}
                          - put: {p: "/invite_auto/:invited_user", s: crate::group::invite_auto}
                          - put: {p: "/invite_group_auto/:invited_group", s: crate::group::invite_auto_group}
                          - put: {p: "/invite/session/:key_session_id", s: crate::group::insert_user_keys_via_session_invite}

                          - put: {p: "/change_rank", s: crate::group::change_rank}
                          - patch: {p: "/change_invite", s: crate::group::stop_invite}
                          #_____________________________________________________________________________________________
                          # groups for join reqs
                          - group:
                              p: "/join_req"
                              gr:
                                - patch: {p: "/:group_id_to_join", s: crate::group::join_req_as_group}
                                - get: {p: "/:last_fetched_time/:last_user_id", s: crate::group::get_join_req}
                                - put: {p: "/:join_user", s: crate::group::accept_join_req}
                                - delete: {p: "/:join_user", s: crate::group::reject_join_req}
                                - put: {p: "/session/:key_session_id", s: crate::group::insert_user_keys_via_session_join_req}
                          #_____________________________________________________________________________________________
                          # groups for key rotation
                          - group:
                              p: "/key_rotation"
                              gr:
                                - post: { p: "", s: crate::group::start_key_rotation }
                                - get: { p: "", s: crate::group::get_keys_for_update }
                                - put: { p: "/:key_id", s: crate::group::done_key_rotation_for_user }